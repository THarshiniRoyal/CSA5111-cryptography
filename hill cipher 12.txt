import numpy as np

def char_to_num(c):
    return ord(c) - ord('A')

def num_to_char(n):
    return chr(n + ord('A'))

def determinant(matrix):
    return np.linalg.det(matrix)

def mod_inverse(a):
    for i in range(1, 26):
        if (a * i) % 26 == 1:
            return i
    return -1

def matrix_inverse(matrix):
    det = determinant(matrix)
    det_inverse = mod_inverse(int(det) % 26)
    if det_inverse == -1:
        print("Matrix is not invertible. Hill cipher key cannot be determined.")
        return None
    return (matrix.I * det_inverse).round().astype(int)

def main():
    key_size = 3

    known_plaintext = np.zeros((key_size, key_size), dtype=int)
    known_ciphertext = np.zeros((key_size, key_size), dtype=int)

    print("Enter the known plaintext matrix (3x3):")
    for i in range(key_size):
        known_plaintext[i] = [char_to_num(c) for c in input().strip()]

    print("Enter the known ciphertext matrix (3x3):")
    for i in range(key_size):
        known_ciphertext[i] = [char_to_num(c) for c in input().strip()]

    inverse_plaintext = matrix_inverse(known_plaintext)
    
    if inverse_plaintext is None:
        return

    key_matrix = np.dot(inverse_plaintext, known_ciphertext) % 26

    print("Hill cipher key matrix:")
    for row in key_matrix:
        print(" ".join([num_to_char(num) for num in row]))

if __name__ == "__main__":
    main()
